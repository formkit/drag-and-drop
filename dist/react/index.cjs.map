{"version":3,"sources":["../../src/react/index.ts","../../src/react/utils.ts"],"sourcesContent":["import type { ReactDragAndDropConfig } from \"./types\";\r\nimport type { ParentConfig } from \"../types\";\r\nimport type { Dispatch, SetStateAction, RefObject } from \"react\";\r\nimport { useRef, useEffect, useState } from \"react\";\r\nimport { dragAndDrop as initParent, isBrowser, tearDown } from \"../index\";\r\nimport { handleReactElements } from \"./utils\";\r\nexport * from \"./types\";\r\n\r\n/**\r\n * Global store for parent els to values.\r\n */\r\nconst parentValues: WeakMap<\r\n  HTMLElement,\r\n  [Array<unknown>, React.Dispatch<React.SetStateAction<Array<unknown>>>]\r\n> = new WeakMap();\r\n\r\nfunction getValues<T>(parent: HTMLElement): Array<T> {\r\n  const values = parentValues.get(parent);\r\n\r\n  if (!values) {\r\n    console.warn(\"No values found for parent element\");\r\n\r\n    return [];\r\n  }\r\n\r\n  return values[0] as Array<T>;\r\n}\r\n\r\nfunction setValues(newValues: Array<unknown>, parent: HTMLElement): void {\r\n  const values = parentValues.get(parent);\r\n\r\n  if (values) values[1](newValues);\r\n\r\n  parentValues.set(parent, [newValues, values![1]]);\r\n}\r\n\r\nfunction handleParent<E extends RefObject<HTMLElement | null> | HTMLElement, T>(\r\n  config: Partial<ReactDragAndDropConfig<E, T[]>>,\r\n  values: [Array<any>, React.Dispatch<React.SetStateAction<Array<any>>>]\r\n) {\r\n  return (el: HTMLElement) => {\r\n    parentValues.set(el, values);\r\n\r\n    initParent<T>({ parent: el, getValues, setValues, config });\r\n  };\r\n}\r\n\r\n/**\r\n * Entry point for React drag and drop.\r\n *\r\n * @param data - The drag and drop configuration.\r\n * @returns void\r\n */\r\nexport function dragAndDrop<E extends HTMLElement, I>(\r\n  data:\r\n    | ReactDragAndDropConfig<RefObject<E | null> | HTMLElement, I[]>\r\n    | Array<ReactDragAndDropConfig<RefObject<E | null> | HTMLElement, I[]>>\r\n): void {\r\n  if (!isBrowser) return;\r\n\r\n  if (!Array.isArray(data)) data = [data];\r\n\r\n  data.forEach((dnd) => {\r\n    const { parent, state, ...rest } = dnd;\r\n\r\n    handleReactElements(parent, handleParent(rest, state));\r\n  });\r\n}\r\n\r\n/**\r\n * Hook for adding drag and drop/sortable support to a list of items.\r\n *\r\n * @param list - Initial list of data.\r\n * @param options - The drag and drop configuration.\r\n * @returns\r\n */\r\nexport function useDragAndDrop<E extends HTMLElement, T = unknown>(\r\n  list: T[],\r\n  options: Partial<ParentConfig<T>> = {}\r\n): [\r\n  RefObject<E>,\r\n  T[],\r\n  Dispatch<SetStateAction<T[]>>,\r\n  (config: Partial<ParentConfig<T>>) => void\r\n] {\r\n  const parent: RefObject<E> = useRef<E>(null);\r\n\r\n  const [values, setValues] = useState(list);\r\n\r\n  function updateConfig(config: Partial<ParentConfig<T>> = {}) {\r\n    dragAndDrop({ parent, state: [values, setValues], ...config });\r\n  }\r\n\r\n  useEffect(() => {\r\n    dragAndDrop({ parent, state: [values, setValues], ...options });\r\n  }, [values]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (parent.current) tearDown(parent.current);\r\n    };\r\n  }, []);\r\n\r\n  return [parent, values, setValues, updateConfig];\r\n}\r\n","import type { RefObject } from \"react\";\r\n\r\n/**\r\n * Checks if the given parent is an HTMLElement.\r\n *\r\n * @param dnd - The drag and drop configuration.\r\n */\r\nexport function getEl<E>(\r\n  parent: HTMLElement | RefObject<E | null>\r\n): HTMLElement | void {\r\n  if (parent instanceof HTMLElement) return parent;\r\n  else if (\"current\" in parent && parent.current instanceof HTMLElement)\r\n    return parent.current;\r\n  else {\r\n    console.warn(\"Invalid parent element\", parent);\r\n\r\n    return;\r\n  }\r\n}\r\n\r\nexport function handleReactElements<E>(\r\n  element: HTMLElement | RefObject<E | null>,\r\n  cb: (el: HTMLElement) => void\r\n): void {\r\n  const el = getEl(element);\r\n\r\n  if (el) cb(el);\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAA4C;AAC5C,eAA+D;;;ACGxD,SAAS,MACd,QACoB;AACpB,MAAI,kBAAkB,YAAa,QAAO;AAAA,WACjC,aAAa,UAAU,OAAO,mBAAmB;AACxD,WAAO,OAAO;AAAA,OACX;AACH,YAAQ,KAAK,0BAA0B,MAAM;AAE7C;AAAA,EACF;AACF;AAEO,SAAS,oBACd,SACA,IACM;AACN,QAAM,KAAK,MAAM,OAAO;AAExB,MAAI,GAAI,IAAG,EAAE;AACf;;;ADhBA,IAAM,eAGF,oBAAI,QAAQ;AAEhB,SAAS,UAAa,QAA+B;AACnD,QAAM,SAAS,aAAa,IAAI,MAAM;AAEtC,MAAI,CAAC,QAAQ;AACX,YAAQ,KAAK,oCAAoC;AAEjD,WAAO,CAAC;AAAA,EACV;AAEA,SAAO,OAAO,CAAC;AACjB;AAEA,SAAS,UAAU,WAA2B,QAA2B;AACvE,QAAM,SAAS,aAAa,IAAI,MAAM;AAEtC,MAAI,OAAQ,QAAO,CAAC,EAAE,SAAS;AAE/B,eAAa,IAAI,QAAQ,CAAC,WAAW,OAAQ,CAAC,CAAC,CAAC;AAClD;AAEA,SAAS,aACP,QACA,QACA;AACA,SAAO,CAAC,OAAoB;AAC1B,iBAAa,IAAI,IAAI,MAAM;AAE3B,iBAAAA,aAAc,EAAE,QAAQ,IAAI,WAAW,WAAW,OAAO,CAAC;AAAA,EAC5D;AACF;AAQO,SAAS,YACd,MAGM;AACN,MAAI,CAAC,mBAAW;AAEhB,MAAI,CAAC,MAAM,QAAQ,IAAI,EAAG,QAAO,CAAC,IAAI;AAEtC,OAAK,QAAQ,CAAC,QAAQ;AACpB,UAAM,EAAE,QAAQ,OAAO,GAAG,KAAK,IAAI;AAEnC,wBAAoB,QAAQ,aAAa,MAAM,KAAK,CAAC;AAAA,EACvD,CAAC;AACH;AASO,SAAS,eACd,MACA,UAAoC,CAAC,GAMrC;AACA,QAAM,aAAuB,qBAAU,IAAI;AAE3C,QAAM,CAAC,QAAQC,UAAS,QAAI,uBAAS,IAAI;AAEzC,WAAS,aAAa,SAAmC,CAAC,GAAG;AAC3D,gBAAY,EAAE,QAAQ,OAAO,CAAC,QAAQA,UAAS,GAAG,GAAG,OAAO,CAAC;AAAA,EAC/D;AAEA,8BAAU,MAAM;AACd,gBAAY,EAAE,QAAQ,OAAO,CAAC,QAAQA,UAAS,GAAG,GAAG,QAAQ,CAAC;AAAA,EAChE,GAAG,CAAC,MAAM,CAAC;AAEX,8BAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAI,OAAO,QAAS,wBAAS,OAAO,OAAO;AAAA,IAC7C;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO,CAAC,QAAQ,QAAQA,YAAW,YAAY;AACjD;","names":["initParent","setValues"]}