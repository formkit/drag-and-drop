{"version":3,"sources":["../../src/solid/index.ts","../../src/solid/utils.ts"],"sourcesContent":["import {\r\n  dragAndDrop as initParent,\r\n  isBrowser,\r\n  type ParentConfig,\r\n  tearDown,\r\n} from \"../index\";\r\nimport {\r\n  createSignal,\r\n  type Accessor,\r\n  type Setter,\r\n  onCleanup,\r\n  onMount,\r\n} from \"solid-js\";\r\nimport { createStore, Store } from \"solid-js/store\";\r\nimport type { SolidDragAndDropConfig, SolidState } from \"./types\";\r\nimport { handleSolidElements } from \"./utils\";\r\n\r\n/**\r\n * Global store for parent els to values.\r\n */\r\nconst parentValues: WeakMap<HTMLElement, SolidState<any>> = new WeakMap();\r\n\r\n/**\r\n * Returns the values of the parent element.\r\n *\r\n * @param parent - The parent element.\r\n *\r\n * @returns The values of the parent element.\r\n */\r\nfunction getValues<T>(parent: HTMLElement): Array<T> {\r\n  const values = parentValues.get(parent);\r\n\r\n  if (!values) {\r\n    console.warn(\"No values found for parent element\");\r\n\r\n    return [];\r\n  }\r\n\r\n  return (values[0] as Accessor<Array<T>>)();\r\n}\r\n\r\n/**\r\n * Sets the values of the parent element.\r\n *\r\n * @param parent - The parent element.\r\n *\r\n * @param newValues - The new values for the parent element.\r\n *\r\n * @returns void\r\n */\r\nfunction setValues(newValues: Array<any>, parent: HTMLElement): void {\r\n  const currentValues = parentValues.get(parent);\r\n\r\n  if (currentValues) currentValues[1](newValues);\r\n}\r\n\r\nfunction handleParent<E extends Accessor<HTMLElement | null> | HTMLElement, T>(\r\n  config: Partial<SolidDragAndDropConfig<E, T[]>>,\r\n  values: SolidState<T[]>\r\n) {\r\n  return (el: HTMLElement) => {\r\n    parentValues.set(el, values);\r\n\r\n    initParent<T>({ parent: el, getValues, setValues, config });\r\n  };\r\n}\r\n\r\nexport function dragAndDrop<E extends HTMLElement, I>(\r\n  data:\r\n    | SolidDragAndDropConfig<Accessor<E | null> | HTMLElement, I[]>\r\n    | Array<SolidDragAndDropConfig<Accessor<E | null> | HTMLElement, I[]>>\r\n): void {\r\n  if (!isBrowser) return;\r\n\r\n  if (!Array.isArray(data)) data = [data];\r\n\r\n  data.forEach((dnd) => {\r\n    const { parent, state, ...rest } = dnd;\r\n\r\n    handleSolidElements(parent, handleParent(rest, state));\r\n  });\r\n}\r\n\r\n/**\r\n * Hook for adding drag and drop/sortable support to a list of items.\r\n *\r\n * @param initValues - Initial list of data.\r\n * @param options - The drag and drop configuration.\r\n * @returns\r\n */\r\nexport function useDragAndDrop<E extends HTMLElement, T = unknown>(\r\n  initValues: T[],\r\n  options: Partial<ParentConfig<T>> = {}\r\n): [\r\n  Setter<E | null>,\r\n  Accessor<Store<T[]>>,\r\n  ReturnType<typeof createStore<T[]>>[1], // Return type of `createStore` will be changed in solid-js 2, so use `ReturnType` util here\r\n  (config?: Partial<ParentConfig<T>>) => void\r\n] {\r\n  const [parent, setParent] = createSignal<E | null>(null);\r\n\r\n  const [values, setValues] = createStore(initValues);\r\n\r\n  function updateConfig(config: Partial<ParentConfig<T>> = {}) {\r\n    dragAndDrop({ parent, state: [() => values, setValues], ...config });\r\n  }\r\n\r\n  onMount(() =>\r\n    dragAndDrop({ parent, state: [() => values, setValues], ...options })\r\n  );\r\n  onCleanup(() => {\r\n    const p = parent();\r\n    p && tearDown(p);\r\n  });\r\n\r\n  return [setParent, () => values, setValues, updateConfig];\r\n}\r\n","import { createEffect, on, type Accessor } from \"solid-js\";\r\n\r\n/**\r\n * Checks if the given parent is an HTMLElement.\r\n *\r\n * @param dnd - The drag and drop configuration.\r\n */\r\nexport function getEl<E>(\r\n  parent: HTMLElement | Accessor<E | null>\r\n): HTMLElement | void {\r\n  if (parent instanceof HTMLElement) return parent;\r\n  else if (typeof parent !== 'function') return undefined;\r\n  const p = parent();\r\n  return p instanceof HTMLElement ? p : undefined;\r\n}\r\n\r\nexport function handleSolidElements<E>(\r\n  element: HTMLElement | Accessor<E | null>,\r\n  cb: (el: HTMLElement) => void\r\n): void {\r\n  createEffect(on(() => getEl(element), (el) => el && cb(el)));\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKO;AACP,IAAAA,mBAMO;AACP,mBAAmC;;;ACbnC,sBAAgD;AAOzC,SAAS,MACd,QACoB;AACpB,MAAI,kBAAkB,YAAa,QAAO;AAAA,WACjC,OAAO,WAAW,WAAY,QAAO;AAC9C,QAAM,IAAI,OAAO;AACjB,SAAO,aAAa,cAAc,IAAI;AACxC;AAEO,SAAS,oBACd,SACA,IACM;AACN,wCAAa,oBAAG,MAAM,MAAM,OAAO,GAAG,CAAC,OAAO,MAAM,GAAG,EAAE,CAAC,CAAC;AAC7D;;;ADDA,IAAM,eAAsD,oBAAI,QAAQ;AASxE,SAAS,UAAa,QAA+B;AACnD,QAAM,SAAS,aAAa,IAAI,MAAM;AAEtC,MAAI,CAAC,QAAQ;AACX,YAAQ,KAAK,oCAAoC;AAEjD,WAAO,CAAC;AAAA,EACV;AAEA,SAAQ,OAAO,CAAC,EAAyB;AAC3C;AAWA,SAAS,UAAU,WAAuB,QAA2B;AACnE,QAAM,gBAAgB,aAAa,IAAI,MAAM;AAE7C,MAAI,cAAe,eAAc,CAAC,EAAE,SAAS;AAC/C;AAEA,SAAS,aACP,QACA,QACA;AACA,SAAO,CAAC,OAAoB;AAC1B,iBAAa,IAAI,IAAI,MAAM;AAE3B,iBAAAC,aAAc,EAAE,QAAQ,IAAI,WAAW,WAAW,OAAO,CAAC;AAAA,EAC5D;AACF;AAEO,SAAS,YACd,MAGM;AACN,MAAI,CAAC,mBAAW;AAEhB,MAAI,CAAC,MAAM,QAAQ,IAAI,EAAG,QAAO,CAAC,IAAI;AAEtC,OAAK,QAAQ,CAAC,QAAQ;AACpB,UAAM,EAAE,QAAQ,OAAO,GAAG,KAAK,IAAI;AAEnC,wBAAoB,QAAQ,aAAa,MAAM,KAAK,CAAC;AAAA,EACvD,CAAC;AACH;AASO,SAAS,eACd,YACA,UAAoC,CAAC,GAMrC;AACA,QAAM,CAAC,QAAQ,SAAS,QAAI,+BAAuB,IAAI;AAEvD,QAAM,CAAC,QAAQC,UAAS,QAAI,0BAAY,UAAU;AAElD,WAAS,aAAa,SAAmC,CAAC,GAAG;AAC3D,gBAAY,EAAE,QAAQ,OAAO,CAAC,MAAM,QAAQA,UAAS,GAAG,GAAG,OAAO,CAAC;AAAA,EACrE;AAEA;AAAA,IAAQ,MACN,YAAY,EAAE,QAAQ,OAAO,CAAC,MAAM,QAAQA,UAAS,GAAG,GAAG,QAAQ,CAAC;AAAA,EACtE;AACA,kCAAU,MAAM;AACd,UAAM,IAAI,OAAO;AACjB,aAAK,mBAAS,CAAC;AAAA,EACjB,CAAC;AAED,SAAO,CAAC,WAAW,MAAM,QAAQA,YAAW,YAAY;AAC1D;","names":["import_solid_js","initParent","setValues"]}